// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnityETP.DataAccess.Concrete.MsSql;

#nullable disable

namespace UnityETP.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221006143507_AddDefaultData")]
    partial class AddDefaultData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PreviewDescrption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.BlogToTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogToTags");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHasChild")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Detail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlogDetails");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlogTags");
                });

            modelBuilder.Entity("UnityETP.Entity.Commons.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nchar(7)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "fff",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9530),
                            IsDelete = false,
                            Name = "White"
                        },
                        new
                        {
                            Id = 2,
                            Code = "f8f9fa",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9533),
                            IsDelete = false,
                            Name = "Gray-100"
                        },
                        new
                        {
                            Id = 3,
                            Code = "e9ecef",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9534),
                            IsDelete = false,
                            Name = "Gray-200"
                        },
                        new
                        {
                            Id = 4,
                            Code = "dee2e6",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9536),
                            IsDelete = false,
                            Name = "Gray-300"
                        },
                        new
                        {
                            Id = 5,
                            Code = "cfdbe6",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9537),
                            IsDelete = false,
                            Name = "Gray-400"
                        },
                        new
                        {
                            Id = 6,
                            Code = "adb5bd",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9538),
                            IsDelete = false,
                            Name = "Gray-500"
                        },
                        new
                        {
                            Id = 7,
                            Code = "6c757d",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9540),
                            IsDelete = false,
                            Name = "Gray-600"
                        },
                        new
                        {
                            Id = 8,
                            Code = "383e50",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9541),
                            IsDelete = false,
                            Name = "Gray-700"
                        },
                        new
                        {
                            Id = 9,
                            Code = "2f3446",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9543),
                            IsDelete = false,
                            Name = "Gray-800"
                        },
                        new
                        {
                            Id = 10,
                            Code = "1e2231",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9544),
                            IsDelete = false,
                            Name = "Gray-900"
                        },
                        new
                        {
                            Id = 11,
                            Code = "000",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9545),
                            IsDelete = false,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 12,
                            Code = "4f5d77",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9547),
                            IsDelete = false,
                            Name = "Body"
                        },
                        new
                        {
                            Id = 13,
                            Code = "495057",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9548),
                            IsDelete = false,
                            Name = "Heading"
                        },
                        new
                        {
                            Id = 14,
                            Code = "292f46",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9549),
                            IsDelete = false,
                            Name = "Menu"
                        },
                        new
                        {
                            Id = 15,
                            Code = "f7f8f9",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9560),
                            IsDelete = false,
                            Name = "Bg-grey"
                        },
                        new
                        {
                            Id = 16,
                            Code = "4d5368",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9568),
                            IsDelete = false,
                            Name = "Ligth"
                        },
                        new
                        {
                            Id = 17,
                            Code = "222736",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9570),
                            IsDelete = false,
                            Name = "Dark-Body"
                        },
                        new
                        {
                            Id = 18,
                            Code = "3BB77E",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9571),
                            IsDelete = false,
                            Name = "Brand"
                        },
                        new
                        {
                            Id = 19,
                            Code = "29A56C",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9572),
                            IsDelete = false,
                            Name = "Brand-Dark"
                        },
                        new
                        {
                            Id = 20,
                            Code = "5897fb",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9574),
                            IsDelete = false,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 21,
                            Code = "782cf1",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9575),
                            IsDelete = false,
                            Name = "indigo"
                        },
                        new
                        {
                            Id = 22,
                            Code = "7850c2",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9576),
                            IsDelete = false,
                            Name = "purple"
                        },
                        new
                        {
                            Id = 23,
                            Code = "d63384",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9579),
                            IsDelete = false,
                            Name = "pink"
                        },
                        new
                        {
                            Id = 24,
                            Code = "ff3551",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9580),
                            IsDelete = false,
                            Name = "red"
                        },
                        new
                        {
                            Id = 25,
                            Code = "fd8a14",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9581),
                            IsDelete = false,
                            Name = "orange"
                        },
                        new
                        {
                            Id = 26,
                            Code = "ffb300",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9583),
                            IsDelete = false,
                            Name = "yellow"
                        },
                        new
                        {
                            Id = 27,
                            Code = "3ed092",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9584),
                            IsDelete = false,
                            Name = "green"
                        },
                        new
                        {
                            Id = 28,
                            Code = "19b989",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9586),
                            IsDelete = false,
                            Name = "teal"
                        },
                        new
                        {
                            Id = 29,
                            Code = "18a1b7",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9590),
                            IsDelete = false,
                            Name = "cyan"
                        });
                });

            modelBuilder.Entity("UnityETP.Entity.Commons.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Icons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "md-qr_code",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9752),
                            IsDelete = false,
                            Name = "Orders"
                        },
                        new
                        {
                            Id = 2,
                            Code = "md-shopping_bag",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9754),
                            IsDelete = false,
                            Name = "Products"
                        },
                        new
                        {
                            Id = 3,
                            Code = "md-shopping_cart",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9755),
                            IsDelete = false,
                            Name = "Orders-2"
                        },
                        new
                        {
                            Id = 4,
                            Code = "md-store",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9756),
                            IsDelete = false,
                            Name = "Sellers"
                        },
                        new
                        {
                            Id = 5,
                            Code = "md-add_box",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9757),
                            IsDelete = false,
                            Name = "Add"
                        },
                        new
                        {
                            Id = 6,
                            Code = "md-monetization_on",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9758),
                            IsDelete = false,
                            Name = "Transactions"
                        },
                        new
                        {
                            Id = 7,
                            Code = "md-person",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9760),
                            IsDelete = false,
                            Name = "Preson"
                        },
                        new
                        {
                            Id = 8,
                            Code = "md-comment",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9761),
                            IsDelete = false,
                            Name = "Reviews"
                        },
                        new
                        {
                            Id = 9,
                            Code = "md-stars",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9761),
                            IsDelete = false,
                            Name = "Brands"
                        },
                        new
                        {
                            Id = 10,
                            Code = "md-pie_chart",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9763),
                            IsDelete = false,
                            Name = "Chart"
                        },
                        new
                        {
                            Id = 11,
                            Code = "md-local_offer",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9764),
                            IsDelete = false,
                            Name = "Tag"
                        },
                        new
                        {
                            Id = 12,
                            Code = "md-settings",
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9765),
                            IsDelete = false,
                            Name = "Setting"
                        });
                });

            modelBuilder.Entity("UnityETP.Entity.Commons.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("UnityETP.Entity.Commons.SucScribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SucScribes");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LocaltionURL")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9813),
                            IsDelete = false,
                            Name = "Baku"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9816),
                            IsDelete = false,
                            Name = "Washington"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9817),
                            IsDelete = false,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9818),
                            IsDelete = false,
                            Name = "London"
                        });
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Faks")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9788),
                            IsDelete = false,
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9790),
                            IsDelete = false,
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9791),
                            IsDelete = false,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9792),
                            IsDelete = false,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9792),
                            IsDelete = false,
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9793),
                            IsDelete = false,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9794),
                            IsDelete = false,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9795),
                            IsDelete = false,
                            Name = "Ukraine"
                        });
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.OnlineAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecurity")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ContactId");

                    b.HasIndex("IconId");

                    b.ToTable("OnlineAddresses");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9835),
                            IsDelete = false,
                            Name = "Yasamal"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9837),
                            IsDelete = false,
                            Name = "Ahamdli"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9838),
                            IsDelete = false,
                            Name = "Khatai"
                        });
                });

            modelBuilder.Entity("UnityETP.Entity.Options.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafe")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("UnityETP.Entity.Options.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("IconId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Detail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ShippingId");

                    b.ToTable("UserOrderDetails");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProdcutStockId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProdcutStockId");

                    b.ToTable("UserOrderItems");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrders");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("UserOrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 27,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9856),
                            IsDelete = false,
                            Name = "Sealed"
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 21,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9857),
                            IsDelete = false,
                            Name = "Buy"
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 25,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9858),
                            IsDelete = false,
                            Name = "Shipping"
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 26,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9859),
                            IsDelete = false,
                            Name = "Recovery"
                        });
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("HotTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationTypesId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("OrganizationTypesId");

                    b.HasIndex("StatusId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("PostionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PositionId");

                    b.ToTable("OrganizationPeople");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrganizationPositions");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("OrganizationStatuses");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("UnityETP.Entity.Payments.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nchar(34)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PaymentCards");
                });

            modelBuilder.Entity("UnityETP.Entity.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentCardId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaymentCardId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("UnityETP.Entity.Payments.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Detail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Additionalinfo")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionFull")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProdcutId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProdcutId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Prodcut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<string>("MiniDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductVendorId")
                        .HasColumnType("int");

                    b.Property<float>("Star")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("ProductSubCategoryId");

                    b.HasIndex("ProductTypesId");

                    b.HasIndex("ProductVendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.ProductCreatingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProdcutId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProdcutId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductCreatingLogs");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.ProductToTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTagId");

                    b.ToTable("ProductToTags");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProdcutId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Star")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProdcutId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Calibre")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductStatuses");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LifeTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PorductId")
                        .HasColumnType("int");

                    b.Property<int>("ProdcutId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProdcutId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("ProductStocks");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductSubCategories");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("UnityETP.Entity.Shippings.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ArriveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Shippings");
                });

            modelBuilder.Entity("UnityETP.Entity.Shippings.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("IconId");

                    b.ToTable("ShippingStatuses");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppRoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafe")
                        .HasColumnType("bit");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("OptionId");

                    b.ToTable("UserAuthorizations");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("UserStatuses");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Detail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ShippingId");

                    b.ToTable("VendorOrderDetails");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProdcutStockId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProdcutStockId");

                    b.ToTable("VendorOrderItems");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorOrders");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("VendorOrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 27,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9877),
                            IsDelete = false,
                            Name = "Sealed"
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 21,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9880),
                            IsDelete = false,
                            Name = "Buy"
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 25,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9881),
                            IsDelete = false,
                            Name = "Shipping"
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 26,
                            CreateAt = new DateTime(2022, 10, 6, 18, 35, 6, 757, DateTimeKind.Local).AddTicks(9881),
                            IsDelete = false,
                            Name = "Recovery"
                        });
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OrganizationCreated")
                        .HasColumnType("datetime2");

                    b.Property<float>("Star")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("AppRole");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSucScribe")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SureName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.HasIndex("UserStatusId");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Blog", b =>
                {
                    b.HasOne("UnityETP.Entity.Blogs.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Users.AppUser", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.BlogToTag", b =>
                {
                    b.HasOne("UnityETP.Entity.Blogs.Blog", "Blog")
                        .WithMany("BlogToTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Blogs.Tag", "Tag")
                        .WithMany("BlogToTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Comment", b =>
                {
                    b.HasOne("UnityETP.Entity.Blogs.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Blogs.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("UnityETP.Entity.Users.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Detail", b =>
                {
                    b.HasOne("UnityETP.Entity.Blogs.Blog", "Blog")
                        .WithOne("Detail")
                        .HasForeignKey("UnityETP.Entity.Blogs.Detail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Address", b =>
                {
                    b.HasOne("UnityETP.Entity.Contacts.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Contacts.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Contacts.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Contact", b =>
                {
                    b.HasOne("UnityETP.Entity.Contacts.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.OnlineAddress", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("OnlineAddresses")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Contacts.Contact", "Contact")
                        .WithMany("OnlineAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Commons.Icon", "Icon")
                        .WithMany("OnlineAddresses")
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Contact");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Phone", b =>
                {
                    b.HasOne("UnityETP.Entity.Contacts.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("UnityETP.Entity.Options.Item", b =>
                {
                    b.HasOne("UnityETP.Entity.Options.Option", "Option")
                        .WithMany("Items")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("UnityETP.Entity.Options.Option", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("Options")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Commons.Icon", "Icon")
                        .WithMany("Options")
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Detail", b =>
                {
                    b.HasOne("UnityETP.Entity.Contacts.Contact", "Contact")
                        .WithMany("UserOrderDetails")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Orders.Order", "UserOrder")
                        .WithOne("Detail")
                        .HasForeignKey("UnityETP.Entity.Orders.Detail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Shippings.Shipping", "Shipping")
                        .WithMany("UserOrderDetails")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Shipping");

                    b.Navigation("UserOrder");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Item", b =>
                {
                    b.HasOne("UnityETP.Entity.Orders.Order", "UserOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Products.Stock", "ProdcutStock")
                        .WithMany("UserOrderItems")
                        .HasForeignKey("ProdcutStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdcutStock");

                    b.Navigation("UserOrder");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Order", b =>
                {
                    b.HasOne("UnityETP.Entity.Payments.Payment", "Payment")
                        .WithMany("UserOrders")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Orders.Status", "Status")
                        .WithMany("UserOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Users.AppUser", "User")
                        .WithMany("UserOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Status", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("UserOrderStatuses")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Organization", b =>
                {
                    b.HasOne("UnityETP.Entity.Contacts.Contact", "Contact")
                        .WithMany("Organizations")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Organizations.Type", "OrganizationTypes")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Organizations.Status", "Status")
                        .WithMany("Organizations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("OrganizationTypes");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Person", b =>
                {
                    b.HasOne("UnityETP.Entity.Contacts.Contact", "Contact")
                        .WithMany("People")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Organizations.Organization", "Organization")
                        .WithMany("People")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Organizations.Position", "Position")
                        .WithMany("People")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Organization");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Status", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("OrganizationStatuses")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Type", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("OrganizationTypes")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("UnityETP.Entity.Payments.Payment", b =>
                {
                    b.HasOne("UnityETP.Entity.Payments.Card", "PaymentCard")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Payments.Type", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentCard");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("UnityETP.Entity.Payments.Type", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("PaymentTypes")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Brand", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("Brands")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Category", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Detail", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Prodcut", "Prodcut")
                        .WithOne("Detail")
                        .HasForeignKey("UnityETP.Entity.Products.Detail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prodcut");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Image", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Prodcut", "Prodcut")
                        .WithMany("Images")
                        .HasForeignKey("ProdcutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prodcut");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Prodcut", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Brand", "ProductBrand")
                        .WithMany("Prodcuts")
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Products.Category", "ProductCategory")
                        .WithMany("Prodcuts")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Products.Status", "ProductStatus")
                        .WithMany("Prodcuts")
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Products.SubCategory", "ProductSubCategory")
                        .WithMany("Prodcuts")
                        .HasForeignKey("ProductSubCategoryId");

                    b.HasOne("UnityETP.Entity.Products.Type", "ProductTypes")
                        .WithMany("Prodcuts")
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Vendors.Vendor", "ProductVendor")
                        .WithMany("Prodcuts")
                        .HasForeignKey("ProductVendorId");

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductStatus");

                    b.Navigation("ProductSubCategory");

                    b.Navigation("ProductTypes");

                    b.Navigation("ProductVendor");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.ProductCreatingLog", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Prodcut", "Prodcut")
                        .WithMany("ProductCreatingLogs")
                        .HasForeignKey("ProdcutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Users.AppUser", "User")
                        .WithMany("ProductCreatingLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prodcut");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.ProductToTag", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Prodcut", "Product")
                        .WithMany("ProductToTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Products.Tag", "ProductTag")
                        .WithMany("ProductToTags")
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Review", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Prodcut", "Prodcut")
                        .WithMany("Reviews")
                        .HasForeignKey("ProdcutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Users.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prodcut");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Status", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("ProductStatuses")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Stock", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Prodcut", "Prodcut")
                        .WithMany("ProductSize")
                        .HasForeignKey("ProdcutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Products.Size", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prodcut");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.SubCategory", b =>
                {
                    b.HasOne("UnityETP.Entity.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("UnityETP.Entity.Shippings.Shipping", b =>
                {
                    b.HasOne("UnityETP.Entity.Organizations.Organization", "Organization")
                        .WithMany("Shippings")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Shippings.Status", "Status")
                        .WithMany("Shippings")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("UnityETP.Entity.Shippings.Status", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("ShippingStatus")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Commons.Icon", "Icon")
                        .WithMany("ShippStatus")
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.Authorization", b =>
                {
                    b.HasOne("UnityETP.Entity.Users.AppRole", "AppRole")
                        .WithMany("Authorizations")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Options.Option", "Option")
                        .WithMany("Authorizations")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.Status", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("UserStatuses")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Detail", b =>
                {
                    b.HasOne("UnityETP.Entity.Contacts.Contact", "Contact")
                        .WithMany("VendorOrderDetails")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Vendors.Orders.Order", "VendorOrder")
                        .WithOne("Detail")
                        .HasForeignKey("UnityETP.Entity.Vendors.Orders.Detail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Shippings.Shipping", "Shipping")
                        .WithMany("VendorOrderDetails")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Shipping");

                    b.Navigation("VendorOrder");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Item", b =>
                {
                    b.HasOne("UnityETP.Entity.Vendors.Orders.Order", "VendorOrder")
                        .WithMany("VendorOrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Products.Stock", "ProdcutStock")
                        .WithMany("VendorOrderItems")
                        .HasForeignKey("ProdcutStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdcutStock");

                    b.Navigation("VendorOrder");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Order", b =>
                {
                    b.HasOne("UnityETP.Entity.Payments.Payment", "Payment")
                        .WithMany("VendorOrders")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Vendors.Orders.Status", "Status")
                        .WithMany("VendorOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Vendors.Vendor", "Vendor")
                        .WithMany("VendorOrders")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Status");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Status", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany("VendorOrderStatuses")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Vendor", b =>
                {
                    b.HasOne("UnityETP.Entity.Commons.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnityETP.Entity.Organizations.Organization", "Organization")
                        .WithOne("Vendor")
                        .HasForeignKey("UnityETP.Entity.Vendors.Vendor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.AppUser", b =>
                {
                    b.HasOne("UnityETP.Entity.Users.Status", "UserStatus")
                        .WithMany("AppUsers")
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Blog", b =>
                {
                    b.Navigation("BlogToTags");

                    b.Navigation("Comments");

                    b.Navigation("Detail")
                        .IsRequired();
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Category", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("UnityETP.Entity.Blogs.Tag", b =>
                {
                    b.Navigation("BlogToTags");
                });

            modelBuilder.Entity("UnityETP.Entity.Commons.Color", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("OnlineAddresses");

                    b.Navigation("Options");

                    b.Navigation("OrganizationStatuses");

                    b.Navigation("OrganizationTypes");

                    b.Navigation("PaymentTypes");

                    b.Navigation("ProductStatuses");

                    b.Navigation("ShippingStatus");

                    b.Navigation("UserOrderStatuses");

                    b.Navigation("UserStatuses");

                    b.Navigation("VendorOrderStatuses");
                });

            modelBuilder.Entity("UnityETP.Entity.Commons.Icon", b =>
                {
                    b.Navigation("OnlineAddresses");

                    b.Navigation("Options");

                    b.Navigation("ShippStatus");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Address", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Contact", b =>
                {
                    b.Navigation("OnlineAddresses");

                    b.Navigation("Organizations");

                    b.Navigation("People");

                    b.Navigation("UserOrderDetails");

                    b.Navigation("VendorOrderDetails");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("UnityETP.Entity.Contacts.Region", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("UnityETP.Entity.Options.Option", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Order", b =>
                {
                    b.Navigation("Detail")
                        .IsRequired();

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("UnityETP.Entity.Orders.Status", b =>
                {
                    b.Navigation("UserOrders");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Organization", b =>
                {
                    b.Navigation("People");

                    b.Navigation("Shippings");

                    b.Navigation("Vendor")
                        .IsRequired();
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Position", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Status", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("UnityETP.Entity.Organizations.Type", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("UnityETP.Entity.Payments.Card", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("UnityETP.Entity.Payments.Payment", b =>
                {
                    b.Navigation("UserOrders");

                    b.Navigation("VendorOrders");
                });

            modelBuilder.Entity("UnityETP.Entity.Payments.Type", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Brand", b =>
                {
                    b.Navigation("Prodcuts");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Prodcuts");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Prodcut", b =>
                {
                    b.Navigation("Detail")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("ProductCreatingLogs");

                    b.Navigation("ProductSize");

                    b.Navigation("ProductToTags");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Status", b =>
                {
                    b.Navigation("Prodcuts");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Stock", b =>
                {
                    b.Navigation("UserOrderItems");

                    b.Navigation("VendorOrderItems");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.SubCategory", b =>
                {
                    b.Navigation("Prodcuts");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Tag", b =>
                {
                    b.Navigation("ProductToTags");
                });

            modelBuilder.Entity("UnityETP.Entity.Products.Type", b =>
                {
                    b.Navigation("Prodcuts");
                });

            modelBuilder.Entity("UnityETP.Entity.Shippings.Shipping", b =>
                {
                    b.Navigation("UserOrderDetails");

                    b.Navigation("VendorOrderDetails");
                });

            modelBuilder.Entity("UnityETP.Entity.Shippings.Status", b =>
                {
                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.Status", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Order", b =>
                {
                    b.Navigation("Detail")
                        .IsRequired();

                    b.Navigation("VendorOrderItems");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Orders.Status", b =>
                {
                    b.Navigation("VendorOrders");
                });

            modelBuilder.Entity("UnityETP.Entity.Vendors.Vendor", b =>
                {
                    b.Navigation("Prodcuts");

                    b.Navigation("VendorOrders");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.AppRole", b =>
                {
                    b.Navigation("Authorizations");
                });

            modelBuilder.Entity("UnityETP.Entity.Users.AppUser", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("ProductCreatingLogs");

                    b.Navigation("Reviews");

                    b.Navigation("UserOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
